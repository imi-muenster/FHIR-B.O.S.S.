
package ${packageBase};

import java.util.*;

import org.apache.commons.lang3.StringUtils;

import ca.uhn.fhir.jpa.provider${package_suffix}.*;
import ca.uhn.fhir.jpa.searchparam.SearchParameterMap;
import ca.uhn.fhir.model.api.Include;
import ca.uhn.fhir.model.api.annotation.*;
#if ( $isRi )
import org.hl7.fhir.${version}.model.*;
#else
import ca.uhn.fhir.model.${version}.composite.*;
import ca.uhn.fhir.model.${version}.resource.*; //
#end
import ca.uhn.fhir.rest.annotation.*;
import ca.uhn.fhir.rest.param.*;
import ca.uhn.fhir.rest.api.SortSpec;
import ca.uhn.fhir.rest.api.SummaryEnum;
import ca.uhn.fhir.rest.api.SearchTotalModeEnum;
import ca.uhn.fhir.rest.api.SearchContainedModeEnum;
import org.hl7.fhir.instance.model.api.IBaseResource;
import de.uni_muenster.imi.fhirFacade.fhir.ResourceProviderTemplate;
import de.uni_muenster.imi.fhirFacade.basex.generator.QueryGenerator;
import de.uni_muenster.imi.fhirFacade.basex.BaseX;
import de.uni_muenster.imi.fhirFacade.fhir.helper.FhirUtilKt;

public class ${className}ResourceProvider extends ResourceProviderTemplate<${className}> {

    public ${className}ResourceProvider() {
        super(new ${className}());
    }

	@Search(allowUnknownParams=true)
	public List<IBaseResource> search(
			javax.servlet.http.HttpServletRequest theServletRequest,
			javax.servlet.http.HttpServletResponse theServletResponse,

			ca.uhn.fhir.rest.api.server.RequestDetails theRequestDetails,

			@Description(shortDefinition="Search the contents of the resource's data using a filter")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_FILTER)
			StringAndListParam theFtFilter,

			@Description(shortDefinition = "Search for resources that are within a certain list")
            @OptionalParam(name= ca.uhn.fhir.rest.api.Constants.PARAM_LIST)
            StringAndListParam theFtList,

			@Description(shortDefinition="Search the contents of the resource's data using a fulltext search")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_CONTENT)
			StringAndListParam theFtContent, 

			@Description(shortDefinition="Search the contents of the resource's narrative using a fulltext search")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_TEXT)
			StringAndListParam theFtText, 

			@Description(shortDefinition="Search for resources which have the given tag")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_TAG)
			TokenAndListParam theSearchForTag, 

			@Description(shortDefinition="Search for resources which have the given security labels")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_SECURITY)
			TokenAndListParam theSearchForSecurity, 
  
			@Description(shortDefinition="Search for resources which have the given profile")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_PROFILE)
			UriAndListParam theSearchForProfile,

			@Description(shortDefinition="Search for resources which have the given source value (Resource.meta.source)")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_SOURCE)
			UriAndListParam theSearchForSource,

			@Description(shortDefinition="Return resources linked to by the given target")
			@OptionalParam(name="_has")
			HasAndListParam theHas, 

#foreach ( $param in $searchParams ) #{if}(true) #{end} 
            //Path: "${param.path}"
			@Description(shortDefinition="${param.description}")
#if (${param.type} == 'string' )
			@OptionalParam(name="${param.name}")
			StringAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'token' )
			@OptionalParam(name="${param.name}")
			TokenAndListParam the${param.nameCapitalized},
#elseif (${param.type} == 'special' )
			@OptionalParam(name="${param.name}")
			SpecialAndListParam the${param.nameCapitalized},
#elseif (${param.type} == 'date' )
			@OptionalParam(name="${param.name}")
			DateRangeParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'uri' )
			@OptionalParam(name="${param.name}")
			UriAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'quantity' )
			@OptionalParam(name="${param.name}")
			QuantityAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'number' )
			@OptionalParam(name="${param.name}")
			NumberAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'reference' )
			@OptionalParam(name="${param.name}", targetTypes={ #{foreach}($nextType in ${param.targetTypes}) ${nextType}.class #{if}($foreach.hasNext), #{end} #{end} } )
			ReferenceAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'composite' )
			@OptionalParam(name="${param.name}", compositeTypes= { ${param.compositeTypes[0]}Param.class, ${param.compositeTypes[1]}Param.class })
			CompositeAndListParam<${param.compositeTypes[0]}Param, ${param.compositeTypes[1]}Param> the${param.nameCapitalized},
#end
#end	

			@RawParam
			Map<String, List<String>> theAdditionalRawParams,

			@Description(shortDefinition="Only return resources which were last updated as specified by the given range")
			@OptionalParam(name="_lastUpdated")
			DateRangeParam theLastUpdated, 

			@IncludeParam
			Set<Include> theIncludes,

			@IncludeParam(reverse=true)
			Set<Include> theRevIncludes,

			@Sort
			SortSpec theSort,
			
			@ca.uhn.fhir.rest.annotation.Count
			Integer theCount,

			@ca.uhn.fhir.rest.annotation.Offset
			Integer theOffset,

			SummaryEnum theSummaryMode,

			SearchTotalModeEnum theSearchTotalMode,

			SearchContainedModeEnum theSearchContainedMode

			){
		try {
			SearchParameterMap paramMap = new SearchParameterMap();
			HashMap<String, String> pathMap = new HashMap();

			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_FILTER, theFtFilter);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_LIST, theFtList);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_CONTENT, theFtContent);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_TEXT, theFtText);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_TAG, theSearchForTag);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_SECURITY, theSearchForSecurity);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_PROFILE, theSearchForProfile);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_SOURCE, theSearchForSource);
			paramMap.add("_lastUpdated", theLastUpdated);
			paramMap.add("_has", theHas);
#foreach ( $param in $searchParams ) 
			paramMap.add("${param.name}", the${param.nameCapitalized});
#if ( $param.path )
			pathMap.put("${param.name}", "${param.path}");
#end
#end
            //Add constant Paths:
            pathMap.put("_id", "${className}.id");
            pathMap.put("_lastUpdated", "${className}.meta.lastUpdated");
            pathMap.put("_tag", "${className}.meta.tag");
            pathMap.put("_profile", "${className}.meta.profile");
            pathMap.put("_security", "${className}.meta.security");
            pathMap.put("_source", "${className}.meta.source");
            pathMap.put("_content", "/@value");
            pathMap.put("_filter", "");
            pathMap.put("_list", "${className}");
            pathMap.put("_has", "${className}");


#if ( $version != 'dstu' )
			paramMap.setRevIncludes(theRevIncludes);

#end
			paramMap.setIncludes(theIncludes);
			paramMap.setSort(theSort);
			paramMap.setCount(theCount);
			paramMap.setOffset(theOffset);
			paramMap.setSummaryMode(theSummaryMode);
			paramMap.setSearchTotalMode(theSearchTotalMode);
			paramMap.setSearchContainedMode(theSearchContainedMode);

            BaseX baseX = getBaseXInstance();
            QueryGenerator gen = new QueryGenerator();

            return FhirUtilKt.decodeQueryResults(
                baseX.executeXQuery(
                        gen.generateQuery(paramMap, pathMap, this.getResourceName())
                )
            );

		} finally {

		}
	}

}
